// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_simulate_evolution
void rcpp_simulate_evolution(std::string sequence, size_t sequence_length, size_t num_initial_copies, size_t critical_region_length, double inactive_probability, std::string mutation_model, double burst_probability, double burst_mean, size_t max_total_copies, double recomb_mean, double recomb_similarity, double selection_threshold, double family_coherence, size_t max_num_representatives, size_t num_steps, double time_per_step, std::string filename_out, size_t num_init_dist, size_t num_pair_dist, size_t num_fam_size, size_t num_fam_dist, double min_output_similarity, bool to_seed, size_t seed);
RcppExport SEXP _retrocombinator_rcpp_simulate_evolution(SEXP sequenceSEXP, SEXP sequence_lengthSEXP, SEXP num_initial_copiesSEXP, SEXP critical_region_lengthSEXP, SEXP inactive_probabilitySEXP, SEXP mutation_modelSEXP, SEXP burst_probabilitySEXP, SEXP burst_meanSEXP, SEXP max_total_copiesSEXP, SEXP recomb_meanSEXP, SEXP recomb_similaritySEXP, SEXP selection_thresholdSEXP, SEXP family_coherenceSEXP, SEXP max_num_representativesSEXP, SEXP num_stepsSEXP, SEXP time_per_stepSEXP, SEXP filename_outSEXP, SEXP num_init_distSEXP, SEXP num_pair_distSEXP, SEXP num_fam_sizeSEXP, SEXP num_fam_distSEXP, SEXP min_output_similaritySEXP, SEXP to_seedSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< size_t >::type sequence_length(sequence_lengthSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_initial_copies(num_initial_copiesSEXP);
    Rcpp::traits::input_parameter< size_t >::type critical_region_length(critical_region_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type inactive_probability(inactive_probabilitySEXP);
    Rcpp::traits::input_parameter< std::string >::type mutation_model(mutation_modelSEXP);
    Rcpp::traits::input_parameter< double >::type burst_probability(burst_probabilitySEXP);
    Rcpp::traits::input_parameter< double >::type burst_mean(burst_meanSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_total_copies(max_total_copiesSEXP);
    Rcpp::traits::input_parameter< double >::type recomb_mean(recomb_meanSEXP);
    Rcpp::traits::input_parameter< double >::type recomb_similarity(recomb_similaritySEXP);
    Rcpp::traits::input_parameter< double >::type selection_threshold(selection_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type family_coherence(family_coherenceSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_num_representatives(max_num_representativesSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_steps(num_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type time_per_step(time_per_stepSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename_out(filename_outSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_init_dist(num_init_distSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_pair_dist(num_pair_distSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_fam_size(num_fam_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_fam_dist(num_fam_distSEXP);
    Rcpp::traits::input_parameter< double >::type min_output_similarity(min_output_similaritySEXP);
    Rcpp::traits::input_parameter< bool >::type to_seed(to_seedSEXP);
    Rcpp::traits::input_parameter< size_t >::type seed(seedSEXP);
    rcpp_simulate_evolution(sequence, sequence_length, num_initial_copies, critical_region_length, inactive_probability, mutation_model, burst_probability, burst_mean, max_total_copies, recomb_mean, recomb_similarity, selection_threshold, family_coherence, max_num_representatives, num_steps, time_per_step, filename_out, num_init_dist, num_pair_dist, num_fam_size, num_fam_dist, min_output_similarity, to_seed, seed);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_retrocombinator_rcpp_simulate_evolution", (DL_FUNC) &_retrocombinator_rcpp_simulate_evolution, 24},
    {NULL, NULL, 0}
};

RcppExport void R_init_retrocombinator(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
